name: CD

on:
  workflow_dispatch:
    inputs:
      api_workflow_run_id:
        description: 'Workflow run ID for API build'
        required: true
        default: ''
      ui_workflow_run_id:
        description: 'Workflow run ID for UI build'
        required: true
        default: ''
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

env:
  AZURE_WEBAPP_NAME_API: ai-chatbot-api-t7xmwp
  AZURE_WEBAPP_NAME_UI: ai-chatbot-ui-t7xmwp
  UI_ARTIFACT_NAME: frontend
  API_ARTIFACT_NAME: backend

jobs:

  deploy-ui:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
    if: ${{ github.event.workflow_run.conclusion == 'success' || inputs.ui_workflow_run_id != '' }}
    steps:
      - name: Download artifact
        uses: actions/github-script@v7
        env:
          UI_ARTIFACT_NAME: ${{ env.UI_ARTIFACT_NAME }}
          WORKFLOW_RUN_ID: ${{ github.event.workflow_run.id || inputs.ui_workflow_run_id || '' }}
        with:
          script: |
            const artifactName = process.env.UI_ARTIFACT_NAME;
            const workflowRunId = process.env.WORKFLOW_RUN_ID;
            if (!artifactName) {
              throw new Error("No artifact name provided.");
            }
            if (!workflowRunId) {
              throw new Error("No workflow run ID provided.");
            }
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: workflowRunId,
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == artifactName
            })[0];
            if (!matchArtifact) {
              throw new Error("Artifact not found for the specified workflow run.");
            }
            let download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip',
            });
            const fs = require('fs');
            const path = require('path');
            const temp = '${{ runner.temp }}/artifacts';
            if (!fs.existsSync(temp)){
              fs.mkdirSync(temp, { recursive: true });
            }
            fs.writeFileSync(path.join(temp, 'ui.zip'), Buffer.from(download.data));

      - name: List directory
        run: ls -a

      - name: Unzip artifact
        run: unzip ui.zip -d "${{ runner.temp }}/artifacts"

      - name: Set image tag variable
        run: echo "IMAGE_TAG=$(cat ${RUNNER_TEMP}/artifacts/image-tag)" >> $GITHUB_ENV

      - name: Update App Service to use new image
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME_UI }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_UI }}
          images: ${{ secrets.ACR_LOGIN_SERVER }}/ai-chatbot-ui:${{ env.IMAGE_TAG }}